from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards import (
    start_keyboard, confirm_keyboard,
    goal_keyboard, gender_keyboard, no_keyboard, search_choice_keyboard
)
# import asyncpg
from datetime import datetime

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RegisterForm(StatesGroup):
    name = State()
    group = State()
    age = State()
    description = State()
    goal = State()
    gender = State()
    specialty = State()
    photo = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!", reply_markup=start_keyboard)

# –ù–∞–∂–∞–ª "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º"
@router.message(F.text == "üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º")
async def send_rules(message: types.Message):
    text = (
        "‚ùóÔ∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö.\n\n"
        "–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
    )
    await message.answer(text, reply_markup=confirm_keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(F.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def ask_name(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterForm.name)

@router.message(RegisterForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞?")
    await state.set_state(RegisterForm.group)

@router.message(RegisterForm.group)
async def process_group(message: types.Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterForm.age)

@router.message(RegisterForm.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    await state.set_state(RegisterForm.description)

@router.message(RegisterForm.description)
async def process_description(message: types.Message, state: FSMContext):
    desc = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    await state.update_data(description=desc)
    await message.answer(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.",
        reply_markup=goal_keyboard
    )
    await state.set_state(RegisterForm.goal)

@router.message(RegisterForm.goal)
async def process_goal(message: types.Message, state: FSMContext):
    goal = message.text.strip().lower()
    if goal not in ['friendship', 'relationship', 'teammate']:
        return await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π: friendship / relationship / teammate", reply_markup=goal_keyboard)
    await state.update_data(goal=goal)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (M / F)", reply_markup=gender_keyboard)
    await state.set_state(RegisterForm.gender)

@router.message(RegisterForm.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip().upper()
    if gender not in ['M', 'F']:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª: M –∏–ª–∏ F", reply_markup=gender_keyboard)
    await state.update_data(gender=gender)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterForm.specialty)

@router.message(RegisterForm.specialty)
async def process_specialty(message: types.Message, state: FSMContext):
    await state.update_data(specialty=message.text)
    await message.answer("–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    await state.set_state(RegisterForm.photo)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
async def send_final_keyboard(message: types.Message, data: dict):
    goal = data.get('goal')
    if goal == 'friendship':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    elif goal == 'relationship':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏ –ª—é–±–æ–≤—å")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    elif goal == 'teammate':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏ –∫–æ–ª–ª–µ–≥—É")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    else:
        keyboard = search_choice_keyboard

    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=keyboard)

@router.message(RegisterForm.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext, db_pool):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    data = await state.get_data()
    await save_user_to_db(message.from_user.id, data, db_pool)
    await send_final_keyboard(message, data)
    await state.clear()

@router.message(RegisterForm.photo)
async def skip_photo(message: types.Message, state: FSMContext, db_pool):
    if message.text.lower() == '–Ω–µ—Ç':
        await state.update_data(photo=None)
        data = await state.get_data()
        await save_user_to_db(message.from_user.id, data, db_pool)
        await send_final_keyboard(message, data)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def save_user_to_db(tg_id, data, db_conn):
    await db_conn.execute("""
        INSERT OR IGNORE INTO Users 
        (tg_id, name, group_name, age, description, goal, gender, specialty, photo)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (tg_id, data['name'], data['group_name'], data['age'],
          data.get('description'), data['goal'], data['gender'],
          data['specialty'], data.get('photo')))
    await db_conn.commit()
