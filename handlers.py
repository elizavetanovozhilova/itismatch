from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_gender_keyboard, get_specialty_keyboard, get_age_range_keyboard
from db import create_connection
import psycopg2
from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards import (
    start_keyboard, confirm_keyboard,
    goal_keyboard, gender_keyboard, no_keyboard, search_choice_keyboard
)
from datetime import datetime

preferences_router = Router()

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RegisterForm(StatesGroup):
    name = State()
    group = State()
    age = State()
    description = State()
    goal = State()
    gender = State()
    specialty = State()
    photo = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!", reply_markup=start_keyboard)

# –ù–∞–∂–∞–ª "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º"
@router.message(F.text == "üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º")
async def send_rules(message: types.Message):
    text = (
        "‚ùóÔ∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö.\n\n"
        "–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
    )
    await message.answer(text, reply_markup=confirm_keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(F.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def ask_name(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterForm.name)

@router.message(RegisterForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞?")
    await state.set_state(RegisterForm.group)

@router.message(RegisterForm.group)
async def process_group(message: types.Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterForm.age)

@router.message(RegisterForm.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    await state.set_state(RegisterForm.description)

@router.message(RegisterForm.description)
async def process_description(message: types.Message, state: FSMContext):
    if message.text is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    desc = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    await state.update_data(description=desc)
    await message.answer(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.",
        reply_markup=goal_keyboard
    )
    await state.set_state(RegisterForm.goal)

@router.message(RegisterForm.goal)
async def process_goal(message: types.Message, state: FSMContext):
    if message.text is None:
        return await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π: friendship / relationship / teammate", reply_markup=goal_keyboard)
    goal = message.text.strip().lower()
    if goal not in ['friendship', 'relationship', 'teammate']:
        return await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π: friendship / relationship / teammate", reply_markup=goal_keyboard)
    await state.update_data(goal=goal)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (M / F)", reply_markup=gender_keyboard)
    await state.set_state(RegisterForm.gender)

@router.message(RegisterForm.gender)
async def process_gender(message: types.Message, state: FSMContext):
    if message.text is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª: M –∏–ª–∏ F", reply_markup=gender_keyboard)
    gender = message.text.strip().upper()
    if gender not in ['M', 'F']:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª: M –∏–ª–∏ F", reply_markup=gender_keyboard)
    await state.update_data(gender=gender)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterForm.specialty)

@router.message(RegisterForm.specialty)
async def process_specialty(message: types.Message, state: FSMContext):
    if message.text is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
    await state.update_data(specialty=message.text)
    await message.answer("–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    await state.set_state(RegisterForm.photo)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
async def send_final_keyboard(message: types.Message, data: dict, state: FSMContext):
    goal = data.get('goal')
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –°–ø–∞—Å–∏–±–æ!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_user_profile(message, data)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π flow –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if goal == "teammate":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç–∏–º–º–µ–π—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
        await state.set_state(PreferencesStates.waiting_for_specialty)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∏—â–µ—Ç–µ —Ç–∏–º–º–µ–π—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ö–∞–∫—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
            reply_markup=get_specialty_keyboard()
        )
    else:
        # –î–ª—è –¥—Ä—É–∂–±—ã –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
        await state.set_state(PreferencesStates.waiting_for_gender)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
            "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
            reply_markup=get_gender_keyboard()
        )

async def send_user_profile(message: types.Message, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    goal = data.get('goal')
    if goal is None:
        goal_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    else:
        goal_text = {
            "friendship": "–î—Ä—É–∂–±–∞",
            "relationship": "–û—Ç–Ω–æ—à–µ–Ω–∏—è", 
            "teammate": "–ö–æ–º–∞–Ω–¥–∞"
        }.get(goal, goal)
    
    gender = data.get('gender')
    if gender is None:
        gender_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    else:
        gender_text = {
            'M': '–ú—É–∂—Å–∫–æ–π',
            'F': '–ñ–µ–Ω—Å–∫–∏–π'
        }.get(gender, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    description = data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    if description is None:
        description = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    
    profile_text = f"üìã **–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:**\n\n"
    profile_text += f"üë§ **–ò–º—è:** {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üéì **–ì—Ä—É–ø–ø–∞:** {data.get('group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üìÖ **–í–æ–∑—Ä–∞—Å—Ç:** {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üë´ **–ü–æ–ª:** {gender_text}\n"
    profile_text += f"üéØ **–¶–µ–ª—å:** {goal_text}\n"
    profile_text += f"üíº **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:** {data.get('specialty', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üìù **–û —Å–µ–±–µ:** {description}\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∫–µ—Ç—ã
    if data.get('photo'):
        await message.answer_photo(
            photo=data['photo'],
            caption=profile_text,
            parse_mode="Markdown"
        )
    else:
        await message.answer(profile_text, parse_mode="Markdown")
    

@router.message(RegisterForm.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    if message.from_user is None or message.photo is None:
        return
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    data = await state.get_data()
    await save_user_to_db(message.from_user.id, data)
    await send_final_keyboard(message, data, state)
    await state.clear()

@router.message(RegisterForm.photo)
async def skip_photo(message: types.Message, state: FSMContext):
    if message.from_user is None:
        return
    if message.text is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)
    if message.text.lower() == '–Ω–µ—Ç':
        await state.update_data(photo=None)
        data = await state.get_data()
        await save_user_to_db(message.from_user.id, data)
        await send_final_keyboard(message, data, state)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–Ω–µ—Ç'", reply_markup=no_keyboard)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def save_user_to_db(tg_id, data):
    conn = create_connection()
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO Users 
                (tg_id, name, group_name, age, description, goal, gender, specialty, photo)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (tg_id) DO UPDATE SET
                    name = EXCLUDED.name,
                    group_name = EXCLUDED.group_name,
                    age = EXCLUDED.age,
                    description = EXCLUDED.description,
                    goal = EXCLUDED.goal,
                    gender = EXCLUDED.gender,
                    specialty = EXCLUDED.specialty,
                    photo = EXCLUDED.photo
            """, (
                tg_id, data['name'], data['group_name'], data['age'],
                data.get('description'), data['goal'], data['gender'],
                data['specialty'], data.get('photo')
            ))
            conn.commit()
            print("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
class PreferencesStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_specialty = State()  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–º–º–µ–π—Ç–æ–≤
    waiting_for_age = State()


@preferences_router.callback_query(StateFilter(PreferencesStates.waiting_for_specialty), F.data.startswith("pref_specialty_"))
async def handle_specialty_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–º–º–µ–π—Ç–æ–≤)"""
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    specialty = callback.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ FSM
    await state.update_data(preferred_specialty=specialty)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
    await state.set_state(PreferencesStates.waiting_for_gender)
    
    specialty_text = {
        "frontend": "Frontend",
        "backend": "Backend",
        "ios": "iOS",
        "android": "Android",
        "gamedev": "GameDev",
        "data_science": "Data Science",
        "project_management": "Project Management",
        "ui_ux_design": "UI/UX Design",
        "ml_engineering": "ML Engineering",
        "qa": "QA",
        "other": "–î—Ä—É–≥–æ–µ",
        "any": "–õ—é–±–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    }.get(specialty, specialty)
    
    await callback.message.edit_text(
        f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty_text}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )

@preferences_router.callback_query(StateFilter(PreferencesStates.waiting_for_gender), F.data.startswith("pref_gender_"))
async def handle_gender_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞"""
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    gender = callback.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –≤ FSM
    await state.update_data(preferred_gender=gender)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(PreferencesStates.waiting_for_age)
    
    gender_text = {
        'M': '–ú—É–∂—á–∏–Ω',
        'F': '–ñ–µ–Ω—â–∏–Ω', 
        'any': '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã'
    }.get(gender, gender)
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–æ: {gender_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
        reply_markup=get_age_range_keyboard()
    )

@preferences_router.callback_query(StateFilter(PreferencesStates.waiting_for_age), F.data.startswith("pref_age_"))
async def handle_age_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    age_data = callback.data.split("_")[-2:]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    
    if age_data[1] == "any":
        min_age = None
        max_age = None
        age_text = "–õ—é–±–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç"
    else:
        min_age = int(age_data[0])
        max_age = int(age_data[1])
        age_text = f"{min_age}-{max_age}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ FSM
    await state.update_data(min_age=min_age, max_age=max_age)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_goal = get_user_goal(callback.from_user.id)
    user_data['preferred_goal'] = user_goal
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = save_user_preferences(callback.from_user.id, user_data)
    
    if success:
        gender_text = {
            'M': '–ú—É–∂—á–∏–Ω',
            'F': '–ñ–µ–Ω—â–∏–Ω', 
            'any': '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã'
        }.get(user_data['preferred_gender'], user_data['preferred_gender'])
        
        goal_text = {
            "friendship": "–î—Ä—É–∂–±–∞",
            "relationship": "–û—Ç–Ω–æ—à–µ–Ω–∏—è", 
            "teammate": "–ö–æ–º–∞–Ω–¥–∞"
        }.get(user_goal, user_goal)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
        result_text += f"–¶–µ–ª—å: {goal_text}\n"
        result_text += f"–ü–æ–ª: {gender_text}\n"
        result_text += f"–í–æ–∑—Ä–∞—Å—Ç: {age_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç–∏–º–º–µ–π—Ç–∞
        if user_goal == "teammate" and user_data.get('preferred_specialty'):
            specialty_text = {
                "frontend": "Frontend",
                "backend": "Backend",
                "ios": "iOS",
                "android": "Android",
                "gamedev": "GameDev",
                "data_science": "Data Science",
                "project_management": "Project Management",
                "ui_ux_design": "UI/UX Design",
                "ml_engineering": "ML Engineering",
                "qa": "QA",
                "other": "–î—Ä—É–≥–æ–µ",
                "any": "–õ—é–±–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
            }.get(user_data['preferred_specialty'], user_data['preferred_specialty'])
            result_text += f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty_text}\n"
        
        result_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
        
        await callback.message.edit_text(result_text)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
    else:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

def get_user_goal(tg_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = create_connection()
    if not conn:
        return "friendship"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT goal FROM Users WHERE tg_id = %s", (tg_id,))
            row = cursor.fetchone()
            return row[0] if row else "friendship"
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "friendship"


def save_user_preferences(tg_id: int, preferences: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è tg_id: {tg_id}")
    print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {preferences}")
    
    conn = create_connection()
    if not conn:
        print("DEBUG: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        with conn.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ tg_id
            cursor.execute("SELECT user_id FROM Users WHERE tg_id = %s", (tg_id,))
            user_row = cursor.fetchone()
            if not user_row:
                print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            user_id = user_row[0]
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω user_id: {user_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            cursor.execute("""
                INSERT INTO User_Preferences 
                (user_id, preferred_gender, min_age, max_age, preferred_goal, preferred_specialty)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    preferred_gender = EXCLUDED.preferred_gender,
                    min_age = EXCLUDED.min_age,
                    max_age = EXCLUDED.max_age,
                    preferred_goal = EXCLUDED.preferred_goal,
                    preferred_specialty = EXCLUDED.preferred_specialty
            """, (
                user_id,
                preferences.get("preferred_gender"),
                preferences.get("min_age"),
                preferences.get("max_age"),
                preferences.get("preferred_goal"),
                preferences.get("preferred_specialty")
            ))
            
            conn.commit()
            print("DEBUG: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
    except psycopg2.Error as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        print(f"DEBUG: –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.pgcode}")
        print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ: {e.pgerror}")
        conn.rollback()
        return False
    finally:
        conn.close()


@preferences_router.message(Command("mystate"))
async def debug_state(message: types.Message, state: FSMContext):
    current = await state.get_state()
    await message.answer(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current}")
